{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tosin5S/yield/blob/main/cyps_2.ipynb_16_26_27_02_2025\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ejxS-bd2Vk0Y"
      },
      "source": [
        "Mount Drive"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7S6jQTwtVUqJ",
        "outputId": "b3b05570-6040-473d-9d9c-10c36532dc93"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WpO3s7klSTgg"
      },
      "source": [
        "Data Preprocessing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "-CD3ieJESKM0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b5bf23bc-f670-4147-f3c2-d10f41eee630"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data preview:\n",
            "    studyYear  programDbId programName  \\\n",
            "0       2016          162        IITA   \n",
            "1       2016          162        IITA   \n",
            "2       2016          162        IITA   \n",
            "3       2016          162        IITA   \n",
            "4       2016          162        IITA   \n",
            "\n",
            "                               programDescription  studyDbId       studyName  \\\n",
            "0  IITA cassava breeding program, Ibadan, Nigeria       3325  16uyt10whtrtIB   \n",
            "1  IITA cassava breeding program, Ibadan, Nigeria       3325  16uyt10whtrtIB   \n",
            "2  IITA cassava breeding program, Ibadan, Nigeria       3325  16uyt10whtrtIB   \n",
            "3  IITA cassava breeding program, Ibadan, Nigeria       3325  16uyt10whtrtIB   \n",
            "4  IITA cassava breeding program, Ibadan, Nigeria       3325  16uyt10whtrtIB   \n",
            "\n",
            "                                                                                                                                  studyDescription  \\\n",
            "0  Assessment of Varieties of Cassava for high yield, disease resistance in a  Uniform Yield Trial (10 clones) in Ibadan 2016/2017 Breeding Season   \n",
            "1  Assessment of Varieties of Cassava for high yield, disease resistance in a  Uniform Yield Trial (10 clones) in Ibadan 2016/2017 Breeding Season   \n",
            "2  Assessment of Varieties of Cassava for high yield, disease resistance in a  Uniform Yield Trial (10 clones) in Ibadan 2016/2017 Breeding Season   \n",
            "3  Assessment of Varieties of Cassava for high yield, disease resistance in a  Uniform Yield Trial (10 clones) in Ibadan 2016/2017 Breeding Season   \n",
            "4  Assessment of Varieties of Cassava for high yield, disease resistance in a  Uniform Yield Trial (10 clones) in Ibadan 2016/2017 Breeding Season   \n",
            "\n",
            "  studyDesign  plotWidth  plotLength  ...  \\\n",
            "0        RCBD          6         5.5  ...   \n",
            "1        RCBD          6         5.5  ...   \n",
            "2        RCBD          6         5.5  ...   \n",
            "3        RCBD          6         5.5  ...   \n",
            "4        RCBD          6         5.5  ...   \n",
            "\n",
            "   sprouting proportion|CO_334:0000008  \\\n",
            "0                                 0.98   \n",
            "1                                 1.00   \n",
            "2                                 1.00   \n",
            "3                                 0.74   \n",
            "4                                 0.95   \n",
            "\n",
            "   storage root cortex color visual rating 1-4|CO_334:0000115  \\\n",
            "0                                                           1   \n",
            "1                                                           1   \n",
            "2                                                           1   \n",
            "3                                                           1   \n",
            "4                                                           1   \n",
            "\n",
            "   storage root periderm color visual rating 1-4|CO_334:0000064  \\\n",
            "0                                                             2   \n",
            "1                                                             1   \n",
            "2                                                             2   \n",
            "3                                                             2   \n",
            "4                                                             2   \n",
            "\n",
            "  storage root pulp color visual rating 1-3|CO_334:0000021  \\\n",
            "0                                                        1   \n",
            "1                                                        1   \n",
            "2                                                        1   \n",
            "3                                                        1   \n",
            "4                                                        1   \n",
            "\n",
            "  storage root shape visual rating 1-6|CO_334:0000020  \\\n",
            "0                                                   2   \n",
            "1                                                   1   \n",
            "2                                                   2   \n",
            "3                                                   2   \n",
            "4                                                   2   \n",
            "\n",
            "   storage root size visual rating 1-7|CO_334:0000019  \\\n",
            "0                                                   3   \n",
            "1                                                   5   \n",
            "2                                                   3   \n",
            "3                                                   3   \n",
            "4                                                   3   \n",
            "\n",
            "  taste of boiled root rating 1-3|CO_334:0000085  top yield|CO_334:0000017  \\\n",
            "0                                            1.0                     31.56   \n",
            "1                                            1.0                     34.69   \n",
            "2                                            1.0                     40.94   \n",
            "3                                            1.0                     12.81   \n",
            "4                                            1.0                     31.56   \n",
            "\n",
            "  total carotenoid by chart 1-8|CO_334:0000161  notes  \n",
            "0                                            2    NaN  \n",
            "1                                            1    NaN  \n",
            "2                                            2    NaN  \n",
            "3                                            2    NaN  \n",
            "4                                            2    NaN  \n",
            "\n",
            "[5 rows x 91 columns]\n",
            "Verified Numeric Columns: ['studyYear', 'programDbId', 'studyDbId', 'plotWidth', 'plotLength', 'fieldSize', 'fieldTrialIsPlannedToBeGenotyped', 'fieldTrialIsPlannedToCross', 'locationDbId', 'germplasmDbId', 'germplasmSynonyms', 'observationUnitDbId', 'replicate', 'blockNumber', 'plotNumber', 'rowNumber', 'colNumber', 'plantNumber', 'plantedSeedlotStockDbId', 'plantedSeedlotStockUniquename', 'plantedSeedlotCurrentCount', 'plantedSeedlotCurrentWeightGram', 'plantedSeedlotBoxName', 'plantedSeedlotTransactionCount', 'plantedSeedlotTransactionWeight', 'plantedSeedlotTransactionDescription', 'availableGermplasmSeedlotUniquenames', 'boiled storage root color visual 1-3|CO_334:0000114', 'cassava anthractnose disease incidence in 6-month|CO_334:0000181', 'cassava anthractnose disease incidence in 9-month|CO_334:0000182', 'cassava anthractnose disease severity in 6-month|CO_334:0000184', 'cassava anthractnose disease severity in 9-month|CO_334:0000185', 'cassava bacterial blight incidence 3-month evaluation|CO_334:0000178', 'cassava bacterial blight incidence 6-month evaluation|CO_334:0000179', 'cassava bacterial blight severity 3-month evaluation|CO_334:0000175', 'cassava bacterial blight severity 6-month evaluation|CO_334:0000176', 'cassava green mite severity first evaluation|CO_334:0000189', 'cassava green mite severity second evaluation|CO_334:0000190', 'cassava mosaic disease incidence 1-month evaluation|CO_334:0000195', 'cassava mosaic disease incidence 3-month evaluation|CO_334:0000196', 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198', 'cassava mosaic disease severity 1-month evaluation|CO_334:0000191', 'cassava mosaic disease severity 3-month evaluation|CO_334:0000192', 'cassava mosaic disease severity 6-month evaluation|CO_334:0000194', 'dry matter content by specific gravity method|CO_334:0000160', 'dry matter content percentage|CO_334:0000092', 'dry yield|CO_334:0000014', 'ease of peeling root cortex visual rating 1-3|CO_334:0000308', 'first apical branch height measurement in cm|CO_334:0000106', 'fresh root yield|CO_334:0000013', 'fresh shoot weight measurement in kg per plot|CO_334:0000016', 'fresh storage root weight per plot|CO_334:0000012', 'harvest index variable|CO_334:0000015', 'initial vigor assessment 1-7|CO_334:0000009', 'number of planted stakes per plot counting|CO_334:0000159', 'plant architecture visual rating 1-5|CO_334:0000099', 'plant stands harvested counting|CO_334:0000010', 'poundability assessment 0-4|CO_334:0000074', 'proportion lodged plants in percentage|CO_334:0000094', 'root neck length visual rating 0-7|CO_334:0000022', 'root number counting|CO_334:0000011', 'root weight in air|CO_334:0000157', 'root weight in water|CO_334:0000158', 'rotted storage root counting|CO_334:0000084', 'specific gravity|CO_334:0000163', 'sprout count at nine-month|CO_334:0000216', 'sprout count at one-month|CO_334:0000213', 'sprout count at six-month|CO_334:0000215', 'sprout count at three-month|CO_334:0000214', 'sprouting proportion|CO_334:0000008', 'storage root cortex color visual rating 1-4|CO_334:0000115', 'storage root periderm color visual rating 1-4|CO_334:0000064', 'storage root pulp color visual rating 1-3|CO_334:0000021', 'storage root shape visual rating 1-6|CO_334:0000020', 'storage root size visual rating 1-7|CO_334:0000019', 'taste of boiled root rating 1-3|CO_334:0000085', 'top yield|CO_334:0000017', 'total carotenoid by chart 1-8|CO_334:0000161']\n",
            "Shape mismatch: Imputed data shape (30, 62) does not match expected columns 78.\n",
            "Remaining NaN values in numeric columns:\n",
            " studyYear                                              0\n",
            "programDbId                                            0\n",
            "studyDbId                                              0\n",
            "plotWidth                                              0\n",
            "plotLength                                             0\n",
            "                                                      ..\n",
            "storage root shape visual rating 1-6|CO_334:0000020    0\n",
            "storage root size visual rating 1-7|CO_334:0000019     0\n",
            "taste of boiled root rating 1-3|CO_334:0000085         2\n",
            "top yield|CO_334:0000017                               0\n",
            "total carotenoid by chart 1-8|CO_334:0000161           0\n",
            "Length: 78, dtype: int64\n",
            "Cleaned data saved to /content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/cleaned/cleaned_2020-04-07t051218phenotype_download.csv\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='median'.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "# Load the CSV file\n",
        "file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/cleaned/2020-04-07t051218phenotype_download.csv'\n",
        "data = pd.read_csv(file_path)\n",
        "\n",
        "# Inspect the first few rows of the dataframe to understand its structure\n",
        "print(\"Data preview:\\n\", data.head())\n",
        "\n",
        "# Identify columns that are truly numeric\n",
        "numeric_cols = data.select_dtypes(include=['number']).columns.tolist()\n",
        "\n",
        "# Further check for columns that might contain non-numeric data\n",
        "for col in numeric_cols:\n",
        "    if not pd.api.types.is_numeric_dtype(data[col]):\n",
        "        print(f\"Column {col} contains non-numeric data and will be excluded.\")\n",
        "        numeric_cols.remove(col)\n",
        "\n",
        "# Print the verified numeric columns\n",
        "print(\"Verified Numeric Columns:\", numeric_cols)\n",
        "\n",
        "# Perform median imputation only on the verified numeric columns\n",
        "numeric_imputer = SimpleImputer(strategy='median')\n",
        "numeric_data_imputed = numeric_imputer.fit_transform(data[numeric_cols])\n",
        "\n",
        "# Ensure the imputed data matches the expected shape\n",
        "if numeric_data_imputed.shape[1] == len(numeric_cols):\n",
        "    # Reassign the imputed values back to the DataFrame\n",
        "    data[numeric_cols] = numeric_data_imputed\n",
        "    print(\"Imputation successful.\")\n",
        "else:\n",
        "    print(f\"Shape mismatch: Imputed data shape {numeric_data_imputed.shape} does not match expected columns {len(numeric_cols)}.\")\n",
        "\n",
        "# Check for any remaining NaN values in numeric columns\n",
        "remaining_na = data[numeric_cols].isna().sum()\n",
        "print(\"Remaining NaN values in numeric columns:\\n\", remaining_na)\n",
        "\n",
        "# Save the cleaned data to a new CSV file\n",
        "cleaned_file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/cleaned/cleaned_2020-04-07t051218phenotype_download.csv'\n",
        "data.to_csv(cleaned_file_path, index=False)\n",
        "\n",
        "print(f\"Cleaned data saved to {cleaned_file_path}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ocfJyZswSW8_"
      },
      "source": [
        "Model Development"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "CfsB-sOiSaFm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "165ae835-badb-4396-8ff5-52f07c426043"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 6.631723082499985\n",
            "R-squared: 0.7349345291747185\n",
            "Model saved to /content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "import joblib\n",
        "\n",
        "# Load the cleaned CSV file\n",
        "cleaned_file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/cleaned/cleaned_2020-04-07t051218phenotype_download.csv'\n",
        "data = pd.read_csv(cleaned_file_path)\n",
        "\n",
        "# Define the target variable\n",
        "target = 'fresh root yield|CO_334:0000013'\n",
        "\n",
        "# Separate features and target\n",
        "X = data.drop(columns=[target])\n",
        "y = data[target]\n",
        "\n",
        "# Identify categorical and numeric columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Create preprocessing pipelines for numeric and categorical data\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean'))  # Impute missing values if any\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),  # Impute missing values\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))  # One-hot encode\n",
        "])\n",
        "\n",
        "# Combine preprocessing steps\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Create a pipeline that first preprocesses the data then applies the model\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n",
        "])\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n",
        "\n",
        "# Train the model\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n",
        "\n",
        "# Save the trained model to disk\n",
        "joblib_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\"\n",
        "joblib.dump(model_pipeline, joblib_file)\n",
        "\n",
        "print(f\"Model saved to {joblib_file}\")\n",
        "\n",
        "# Make predictions on new data (if available)\n",
        "# new_data = pd.DataFrame(...)  # Replace with your new data\n",
        "# new_predictions = model_pipeline.predict(new_data)\n",
        "# print(\"Predictions on new data:\", new_predictions)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Cleaned data for model development"
      ],
      "metadata": {
        "id": "D-3RwpQM8MIZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "import joblib\n",
        "\n",
        "# Load the cleaned CSV file\n",
        "cleaned_file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/cleaned/cleaned_2020-04-07t051218phenotype_download.csv'\n",
        "data = pd.read_csv(cleaned_file_path)\n",
        "\n",
        "# Define the target variable\n",
        "target = 'fresh root yield|CO_334:0000013'\n",
        "\n",
        "# Separate features and target\n",
        "X = data.drop(columns=[target])\n",
        "y = data[target]\n",
        "\n",
        "# Identify categorical and numeric columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Create preprocessing pipelines for numeric and categorical data\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean'))  # Impute missing values if any\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),  # Impute missing values\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))  # One-hot encode\n",
        "])\n",
        "\n",
        "# Combine preprocessing steps\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Create a pipeline that first preprocesses the data then applies the model\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n",
        "])\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n",
        "\n",
        "# Train the model\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n",
        "\n",
        "# Save the trained model to disk\n",
        "joblib_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/cleaned/random_forest_model.pkl\"\n",
        "joblib.dump(model_pipeline, joblib_file)\n",
        "\n",
        "print(f\"Model saved to {joblib_file}\")\n",
        "\n",
        "# Make predictions on new data (if available)\n",
        "# new_data = pd.DataFrame(...)  # Replace with your new data\n",
        "# new_predictions = model_pipeline.predict(new_data)\n",
        "# print(\"Predictions on new data:\", new_predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VB2Tti9K8IRt",
        "outputId": "871160b3-3dec-44d8-f982-839ebf7a2400"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 6.631723082499985\n",
            "R-squared: 0.7349345291747185\n",
            "Model saved to /content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/cleaned/random_forest_model.pkl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Uncleaned data for model development"
      ],
      "metadata": {
        "id": "ffiwliWm8TIX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "import joblib\n",
        "\n",
        "# Load the cleaned CSV file\n",
        "cleaned_file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/uncleaned/2020-04-07t051218phenotype_download.csv'\n",
        "data = pd.read_csv(cleaned_file_path)\n",
        "\n",
        "# Define the target variable\n",
        "target = 'fresh root yield|CO_334:0000013'\n",
        "\n",
        "# Separate features and target\n",
        "X = data.drop(columns=[target])\n",
        "y = data[target]\n",
        "\n",
        "# Identify categorical and numeric columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Create preprocessing pipelines for numeric and categorical data\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean'))  # Impute missing values if any\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),  # Impute missing values\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))  # One-hot encode\n",
        "])\n",
        "\n",
        "# Combine preprocessing steps\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Create a pipeline that first preprocesses the data then applies the model\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n",
        "])\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n",
        "\n",
        "# Train the model\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n",
        "\n",
        "# Save the trained model to disk\n",
        "joblib_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/uncleaned/random_forest_model.pkl\"\n",
        "joblib.dump(model_pipeline, joblib_file)\n",
        "\n",
        "print(f\"Model saved to {joblib_file}\")\n",
        "\n",
        "# Make predictions on new data (if available)\n",
        "# new_data = pd.DataFrame(...)  # Replace with your new data\n",
        "# new_predictions = model_pipeline.predict(new_data)\n",
        "# print(\"Predictions on new data:\", new_predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rH9eFIsr8RsJ",
        "outputId": "cd0f89de-23d0-437e-e9c4-580a270ecdaa"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 6.631723082499985\n",
            "R-squared: 0.7349345291747185\n",
            "Model saved to /content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/uncleaned/random_forest_model.pkl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Oxe9L2lzSbSG"
      },
      "source": [
        "Prediction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "_KrcNJoLSdHz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6f7420e8-257a-4eeb-9d5f-8ffd93544d8a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'preprocessor': ColumnTransformer(transformers=[('num',\n",
            "                                 Pipeline(steps=[('imputer', SimpleImputer())]),\n",
            "                                 Index(['studyYear', 'programDbId', 'studyDbId', 'plotWidth', 'plotLength',\n",
            "       'fieldSize', 'fieldTrialIsPlannedToBeGenotyped',\n",
            "       'fieldTrialIsPlannedToCross', 'locationDbId', 'germplasmDbId',\n",
            "       'germplasmSynonyms', 'observationUnitDbId', 'replicate', 'blockNumber',\n",
            "       'plotNumber', 'rowNum...\n",
            "                                 Pipeline(steps=[('imputer',\n",
            "                                                  SimpleImputer(fill_value='missing',\n",
            "                                                                strategy='constant')),\n",
            "                                                 ('onehot',\n",
            "                                                  OneHotEncoder(handle_unknown='ignore'))]),\n",
            "                                 Index(['programName', 'programDescription', 'studyName', 'studyDescription',\n",
            "       'studyDesign', 'plantingDate', 'harvestDate', 'locationName',\n",
            "       'germplasmName', 'observationLevel', 'observationUnitName', 'entryType',\n",
            "       'notes'],\n",
            "      dtype='object'))]), 'regressor': RandomForestRegressor(random_state=42)}\n",
            "Predictions on new data: [7.843]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import joblib\n",
        "\n",
        "# Load the trained model pipeline\n",
        "model_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\"\n",
        "model_pipeline = joblib.load(model_file)\n",
        "\n",
        "# Inspect the pipeline steps to find the correct name for the final step\n",
        "print(model_pipeline.named_steps)\n",
        "\n",
        "# Extract feature names from the preprocessor\n",
        "numeric_features = model_pipeline.named_steps['preprocessor'].transformers_[0][2]\n",
        "categorical_features = model_pipeline.named_steps['preprocessor'].transformers_[1][2]\n",
        "\n",
        "# Ensure they are lists\n",
        "numeric_features = list(numeric_features) if not isinstance(numeric_features, list) else numeric_features\n",
        "categorical_features = list(categorical_features) if not isinstance(categorical_features, list) else categorical_features\n",
        "\n",
        "# Prepare new data (ensure it has the same columns as the training data)\n",
        "# Replace this with your actual new data\n",
        "new_data = pd.DataFrame({\n",
        "    'cassava anthractnose disease severity in 9-month|CO_334:0000185': [3],\n",
        "})\n",
        "\n",
        "# Ensure all required columns are present in the new data\n",
        "all_features = numeric_features + categorical_features\n",
        "\n",
        "for col in all_features:\n",
        "    if col not in new_data.columns:\n",
        "        new_data[col] = 0  # Fill with default value, adjust as necessary\n",
        "\n",
        "# Select only the columns used in training\n",
        "new_data = new_data[all_features]\n",
        "\n",
        "# Preprocess the new data using the same pipeline\n",
        "new_data_preprocessed = model_pipeline.named_steps['preprocessor'].transform(new_data)\n",
        "\n",
        "# Make predictions on the new data\n",
        "new_predictions = model_pipeline.named_steps['regressor'].predict(new_data_preprocessed)\n",
        "\n",
        "print(\"Predictions on new data:\", new_predictions)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Precision, F1 score and Recall  The metrics and evaluation"
      ],
      "metadata": {
        "id": "BPPDsw9phLiw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "import joblib\n",
        "import pandas as pd\n",
        "\n",
        "# Load the cleaned CSV file\n",
        "file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/cleaned/cleaned_2020-04-07t051218phenotype_download.csv'\n",
        "data = pd.read_csv(file_path)\n",
        "\n",
        "# Define the original continuous target variable\n",
        "target = 'fresh root yield|CO_334:0000013'\n",
        "X = data.drop(columns=[target])\n",
        "y = data[target]\n",
        "\n",
        "# Discretize y into binary classes (e.g., high vs. low yield)\n",
        "threshold = y.median()\n",
        "y_class = (y > threshold).astype(int)\n",
        "\n",
        "# Identify categorical and numeric columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Preprocessing pipelines for numeric and categorical data\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean'))\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Build a classification pipeline instead of a regression pipeline\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))\n",
        "])\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y_class, test_size=0.4, random_state=42)\n",
        "\n",
        "# Train the classification model\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model using classification metrics\n",
        "precision = precision_score(y_test, y_pred)\n",
        "recall = recall_score(y_test, y_pred)\n",
        "f1 = f1_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Precision: {precision}\")\n",
        "print(f\"Recall: {recall}\")\n",
        "print(f\"F1 Score: {f1}\")\n",
        "\n",
        "# Save the trained classifier to disk\n",
        "joblib_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_classifier.pkl\"\n",
        "joblib.dump(model_pipeline, joblib_file)\n",
        "print(f\"Model saved to {joblib_file}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3v3zaLiqkiSf",
        "outputId": "0c46c589-5953-4496-e3db-1b8a60a20804"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1 Score: 1.0\n",
            "Model saved to /content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_classifier.pkl\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Random Forest Regressor"
      ],
      "metadata": {
        "id": "9JJQ4fKpkkwZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "import joblib\n",
        "\n",
        "# Load the cleaned CSV file\n",
        "cleaned_file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/cleaned/cleaned_2020-04-07t051218phenotype_download.csv'\n",
        "data = pd.read_csv(cleaned_file_path)\n",
        "\n",
        "# Define the target variable\n",
        "target = 'fresh root yield|CO_334:0000013'\n",
        "\n",
        "# Separate features and target\n",
        "X = data.drop(columns=[target])\n",
        "y = data[target]\n",
        "\n",
        "# Identify categorical and numeric columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Create preprocessing pipelines for numeric and categorical data\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean'))  # Impute missing values if any\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),  # Impute missing values\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))  # One-hot encode\n",
        "])\n",
        "\n",
        "# Combine preprocessing steps\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Create a pipeline that first preprocesses the data then applies the model\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n",
        "])\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n",
        "\n",
        "# Train the model\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n",
        "\n",
        "# Save the trained model to disk\n",
        "joblib_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\"\n",
        "joblib.dump(model_pipeline, joblib_file)\n",
        "\n",
        "print(f\"Model saved to {joblib_file}\")\n",
        "\n",
        "# Make predictions on new data (if available)\n",
        "# new_data = pd.DataFrame(...)  # Replace with your new data\n",
        "# new_predictions = model_pipeline.predict(new_data)\n",
        "# print(\"Predictions on new data:\", new_predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zY1gxzY9hKNx",
        "outputId": "661dbaae-cf75-402c-f990-92f4e96266d6"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 6.631723082499985\n",
            "R-squared: 0.7349345291747185\n",
            "Model saved to /content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Feature Importance Metrics"
      ],
      "metadata": {
        "id": "nSEhIOfekD0z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer  # Ensure this is imported\n",
        "import joblib\n",
        "\n",
        "# Load the cleaned CSV file\n",
        "cleaned_file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/cleaned/cleaned_2020-04-07t051218phenotype_download.csv'\n",
        "data = pd.read_csv(cleaned_file_path)\n",
        "\n",
        "\n",
        "# Define the target variable\n",
        "target = 'fresh root yield|CO_334:0000013'\n",
        "\n",
        "# Separate features and target\n",
        "X = data.drop(columns=[target])\n",
        "y = data[target]\n",
        "\n",
        "# Identify categorical and numeric columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Create preprocessing pipelines for numeric and categorical data\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean'))\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "# Combine preprocessing steps\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Create a pipeline that first preprocesses the data then applies the model\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n",
        "])\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n",
        "\n",
        "# Train the model\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n",
        "\n",
        "# Save the trained model to disk\n",
        "joblib_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\"\n",
        "joblib.dump(model_pipeline, joblib_file)\n",
        "print(f\"Model saved to {joblib_file}\")\n",
        "\n",
        "# --- Extracting Feature Importances ---\n",
        "# Retrieve the preprocessor from the pipeline\n",
        "preprocessor = model_pipeline.named_steps['preprocessor']\n",
        "\n",
        "# For numeric features, the names remain unchanged\n",
        "num_features = list(numeric_cols)\n",
        "\n",
        "# For categorical features, get the feature names from the one-hot encoder\n",
        "# Note: get_feature_names_out is available in recent versions of scikit-learn\n",
        "cat_encoder = preprocessor.named_transformers_['cat'].named_steps['onehot']\n",
        "cat_features = cat_encoder.get_feature_names_out(categorical_cols).tolist()\n",
        "\n",
        "# Combine all feature names in the order they appear after transformation\n",
        "feature_names = num_features + cat_features\n",
        "\n",
        "# Get feature importances from the RandomForestRegressor\n",
        "importances = model_pipeline.named_steps['regressor'].feature_importances_\n",
        "\n",
        "# Get the complete list of feature names after preprocessing\n",
        "feature_names = model_pipeline.named_steps['preprocessor'].get_feature_names_out()\n",
        "print(\"Number of features:\", len(feature_names))\n",
        "print(\"Importances length:\", len(model_pipeline.named_steps['regressor'].feature_importances_))\n",
        "\n",
        "# Create a DataFrame with the feature importances\n",
        "feature_importance_df = pd.DataFrame({\n",
        "    'Feature': feature_names,\n",
        "    'Importance': model_pipeline.named_steps['regressor'].feature_importances_\n",
        "}).sort_values(by='Importance', ascending=False)\n",
        "\n",
        "# Show full column names in output\n",
        "pd.set_option('display.max_colwidth', None)\n",
        "print(\"feature_names.tolist: \", feature_names.tolist())\n",
        "\n",
        "count_features = len(feature_names.tolist())\n",
        "print(\"Count of features:\", count_features)\n",
        "\n",
        "\n",
        "print(feature_importance_df)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sTcgC-RKkDPs",
        "outputId": "112638ad-afc1-4c53-b7c4-43e798d016de"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 6.631723082499985\n",
            "R-squared: 0.7349345291747185\n",
            "Model saved to /content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\n",
            "Number of features: 101\n",
            "Importances length: 101\n",
            "feature_names.tolist:  ['num__studyYear', 'num__programDbId', 'num__studyDbId', 'num__plotWidth', 'num__plotLength', 'num__fieldSize', 'num__locationDbId', 'num__germplasmDbId', 'num__observationUnitDbId', 'num__replicate', 'num__blockNumber', 'num__plotNumber', 'num__boiled storage root color visual 1-3|CO_334:0000114', 'num__cassava anthractnose disease incidence in 6-month|CO_334:0000181', 'num__cassava anthractnose disease incidence in 9-month|CO_334:0000182', 'num__cassava anthractnose disease severity in 6-month|CO_334:0000184', 'num__cassava anthractnose disease severity in 9-month|CO_334:0000185', 'num__cassava bacterial blight incidence 3-month evaluation|CO_334:0000178', 'num__cassava bacterial blight incidence 6-month evaluation|CO_334:0000179', 'num__cassava bacterial blight severity 3-month evaluation|CO_334:0000175', 'num__cassava bacterial blight severity 6-month evaluation|CO_334:0000176', 'num__cassava green mite severity first evaluation|CO_334:0000189', 'num__cassava green mite severity second evaluation|CO_334:0000190', 'num__cassava mosaic disease incidence 1-month evaluation|CO_334:0000195', 'num__cassava mosaic disease incidence 3-month evaluation|CO_334:0000196', 'num__cassava mosaic disease severity 1-month evaluation|CO_334:0000191', 'num__cassava mosaic disease severity 3-month evaluation|CO_334:0000192', 'num__cassava mosaic disease severity 6-month evaluation|CO_334:0000194', 'num__dry matter content by specific gravity method|CO_334:0000160', 'num__dry matter content percentage|CO_334:0000092', 'num__dry yield|CO_334:0000014', 'num__ease of peeling root cortex visual rating 1-3|CO_334:0000308', 'num__first apical branch height measurement in cm|CO_334:0000106', 'num__fresh shoot weight measurement in kg per plot|CO_334:0000016', 'num__fresh storage root weight per plot|CO_334:0000012', 'num__harvest index variable|CO_334:0000015', 'num__initial vigor assessment 1-7|CO_334:0000009', 'num__number of planted stakes per plot counting|CO_334:0000159', 'num__plant architecture visual rating 1-5|CO_334:0000099', 'num__plant stands harvested counting|CO_334:0000010', 'num__poundability assessment 0-4|CO_334:0000074', 'num__proportion lodged plants in percentage|CO_334:0000094', 'num__root neck length visual rating 0-7|CO_334:0000022', 'num__root number counting|CO_334:0000011', 'num__root weight in air|CO_334:0000157', 'num__root weight in water|CO_334:0000158', 'num__rotted storage root counting|CO_334:0000084', 'num__specific gravity|CO_334:0000163', 'num__sprout count at nine-month|CO_334:0000216', 'num__sprout count at one-month|CO_334:0000213', 'num__sprout count at six-month|CO_334:0000215', 'num__sprout count at three-month|CO_334:0000214', 'num__sprouting proportion|CO_334:0000008', 'num__storage root cortex color visual rating 1-4|CO_334:0000115', 'num__storage root periderm color visual rating 1-4|CO_334:0000064', 'num__storage root pulp color visual rating 1-3|CO_334:0000021', 'num__storage root shape visual rating 1-6|CO_334:0000020', 'num__storage root size visual rating 1-7|CO_334:0000019', 'num__taste of boiled root rating 1-3|CO_334:0000085', 'num__top yield|CO_334:0000017', 'num__total carotenoid by chart 1-8|CO_334:0000161', 'cat__programName_IITA', 'cat__programDescription_IITA cassava breeding program, Ibadan, Nigeria', 'cat__studyName_16uyt10whtrtIB', 'cat__studyDescription_Assessment of Varieties of Cassava for high yield, disease resistance in a  Uniform Yield Trial (10 clones) in Ibadan 2016/2017 Breeding Season', 'cat__studyDesign_RCBD', 'cat__plantingDate_2016-June-21', 'cat__harvestDate_2017-May-26', 'cat__locationName_Ibadan', 'cat__germplasmName_IITA-TMS-IBA131129', 'cat__germplasmName_IITA-TMS-IBA131187', 'cat__germplasmName_IITA-TMS-IBA131324', 'cat__germplasmName_IITA-TMS-IBA131390', 'cat__germplasmName_IITA-TMS-IBA131511', 'cat__germplasmName_IITA-TMS-IBA131514', 'cat__germplasmName_IITA-TMS-IBA131710', 'cat__germplasmName_IITA-TMS-IBA131712', 'cat__germplasmName_IITA-TMS-IBA980581', 'cat__germplasmName_TMEB419', 'cat__observationLevel_plot', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131187_110', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131324_101', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131390_102', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131514_107', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131710_105', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131712_108', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131129_207', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131187_209', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131390_208', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131511_210', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA980581_201', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-TMEB419_206', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131129_303', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131187_301', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131324_308', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131514_302', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131710_306', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-TMEB419_310', 'cat__entryType_test', 'cat__notes_ (Operator: PVNSPRASAD, Time: )', 'cat__notes_missing']\n",
            "Count of features: 101\n",
            "                                                                  Feature  \\\n",
            "34                 num__fresh storage root weight per plot|CO_334:0000012   \n",
            "30                                          num__dry yield|CO_334:0000014   \n",
            "35                             num__harvest index variable|CO_334:0000015   \n",
            "43                               num__root number counting|CO_334:0000011   \n",
            "14  num__cassava anthractnose disease incidence in 9-month|CO_334:0000182   \n",
            "..                                                                    ...   \n",
            "66                                         cat__plantingDate_2016-June-21   \n",
            "67                                           cat__harvestDate_2017-May-26   \n",
            "68                                               cat__locationName_Ibadan   \n",
            "5                                                          num__fieldSize   \n",
            "0                                                          num__studyYear   \n",
            "\n",
            "    Importance  \n",
            "34    0.310280  \n",
            "30    0.189499  \n",
            "35    0.168926  \n",
            "43    0.098870  \n",
            "14    0.070607  \n",
            "..         ...  \n",
            "66    0.000000  \n",
            "67    0.000000  \n",
            "68    0.000000  \n",
            "5     0.000000  \n",
            "0     0.000000  \n",
            "\n",
            "[101 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "data preprocessing (uncleaned data)\n",
        " on feature importance metrics"
      ],
      "metadata": {
        "id": "nXrdZcOKhttT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer  # Ensure this is imported\n",
        "import joblib\n",
        "\n",
        "# Load the cleaned CSV file\n",
        "cleaned_file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/uncleaned/2020-04-07t051218phenotype_download.csv'\n",
        "data = pd.read_csv(cleaned_file_path)\n",
        "\n",
        "\n",
        "# Define the target variable\n",
        "target = 'fresh root yield|CO_334:0000013'\n",
        "\n",
        "# Separate features and target\n",
        "X = data.drop(columns=[target])\n",
        "y = data[target]\n",
        "\n",
        "# Identify categorical and numeric columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Create preprocessing pipelines for numeric and categorical data\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean'))\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "# Combine preprocessing steps\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Create a pipeline that first preprocesses the data then applies the model\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n",
        "])\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n",
        "\n",
        "# Train the model\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n",
        "\n",
        "# Save the trained model to disk\n",
        "joblib_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\"\n",
        "joblib.dump(model_pipeline, joblib_file)\n",
        "print(f\"Model saved to {joblib_file}\")\n",
        "\n",
        "# --- Extracting Feature Importances ---\n",
        "# Retrieve the preprocessor from the pipeline\n",
        "preprocessor = model_pipeline.named_steps['preprocessor']\n",
        "\n",
        "# For numeric features, the names remain unchanged\n",
        "num_features = list(numeric_cols)\n",
        "\n",
        "# For categorical features, get the feature names from the one-hot encoder\n",
        "# Note: get_feature_names_out is available in recent versions of scikit-learn\n",
        "cat_encoder = preprocessor.named_transformers_['cat'].named_steps['onehot']\n",
        "cat_features = cat_encoder.get_feature_names_out(categorical_cols).tolist()\n",
        "\n",
        "# Combine all feature names in the order they appear after transformation\n",
        "feature_names = num_features + cat_features\n",
        "\n",
        "# Get feature importances from the RandomForestRegressor\n",
        "importances = model_pipeline.named_steps['regressor'].feature_importances_\n",
        "\n",
        "# Get the complete list of feature names after preprocessing\n",
        "feature_names = model_pipeline.named_steps['preprocessor'].get_feature_names_out()\n",
        "print(\"Number of features:\", len(feature_names))\n",
        "print(\"Importances length:\", len(model_pipeline.named_steps['regressor'].feature_importances_))\n",
        "\n",
        "# Create a DataFrame with the feature importances\n",
        "feature_importance_df = pd.DataFrame({\n",
        "    'Feature': feature_names,\n",
        "    'Importance': model_pipeline.named_steps['regressor'].feature_importances_\n",
        "}).sort_values(by='Importance', ascending=False)\n",
        "\n",
        "# Show full column names in output\n",
        "pd.set_option('display.max_colwidth', None)\n",
        "print(\"feature_names.tolist: \", feature_names.tolist())\n",
        "\n",
        "count_features = len(feature_names.tolist())\n",
        "print(\"Count of features:\", count_features)\n",
        "\n",
        "\n",
        "print(feature_importance_df)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bBRV5EHgh5Mq",
        "outputId": "30579d59-cda3-4369-f0f5-bd10351951d5"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 6.631723082499985\n",
            "R-squared: 0.7349345291747185\n",
            "Model saved to /content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\n",
            "Number of features: 101\n",
            "Importances length: 101\n",
            "feature_names.tolist:  ['num__studyYear', 'num__programDbId', 'num__studyDbId', 'num__plotWidth', 'num__plotLength', 'num__fieldSize', 'num__locationDbId', 'num__germplasmDbId', 'num__observationUnitDbId', 'num__replicate', 'num__blockNumber', 'num__plotNumber', 'num__boiled storage root color visual 1-3|CO_334:0000114', 'num__cassava anthractnose disease incidence in 6-month|CO_334:0000181', 'num__cassava anthractnose disease incidence in 9-month|CO_334:0000182', 'num__cassava anthractnose disease severity in 6-month|CO_334:0000184', 'num__cassava anthractnose disease severity in 9-month|CO_334:0000185', 'num__cassava bacterial blight incidence 3-month evaluation|CO_334:0000178', 'num__cassava bacterial blight incidence 6-month evaluation|CO_334:0000179', 'num__cassava bacterial blight severity 3-month evaluation|CO_334:0000175', 'num__cassava bacterial blight severity 6-month evaluation|CO_334:0000176', 'num__cassava green mite severity first evaluation|CO_334:0000189', 'num__cassava green mite severity second evaluation|CO_334:0000190', 'num__cassava mosaic disease incidence 1-month evaluation|CO_334:0000195', 'num__cassava mosaic disease incidence 3-month evaluation|CO_334:0000196', 'num__cassava mosaic disease severity 1-month evaluation|CO_334:0000191', 'num__cassava mosaic disease severity 3-month evaluation|CO_334:0000192', 'num__cassava mosaic disease severity 6-month evaluation|CO_334:0000194', 'num__dry matter content by specific gravity method|CO_334:0000160', 'num__dry matter content percentage|CO_334:0000092', 'num__dry yield|CO_334:0000014', 'num__ease of peeling root cortex visual rating 1-3|CO_334:0000308', 'num__first apical branch height measurement in cm|CO_334:0000106', 'num__fresh shoot weight measurement in kg per plot|CO_334:0000016', 'num__fresh storage root weight per plot|CO_334:0000012', 'num__harvest index variable|CO_334:0000015', 'num__initial vigor assessment 1-7|CO_334:0000009', 'num__number of planted stakes per plot counting|CO_334:0000159', 'num__plant architecture visual rating 1-5|CO_334:0000099', 'num__plant stands harvested counting|CO_334:0000010', 'num__poundability assessment 0-4|CO_334:0000074', 'num__proportion lodged plants in percentage|CO_334:0000094', 'num__root neck length visual rating 0-7|CO_334:0000022', 'num__root number counting|CO_334:0000011', 'num__root weight in air|CO_334:0000157', 'num__root weight in water|CO_334:0000158', 'num__rotted storage root counting|CO_334:0000084', 'num__specific gravity|CO_334:0000163', 'num__sprout count at nine-month|CO_334:0000216', 'num__sprout count at one-month|CO_334:0000213', 'num__sprout count at six-month|CO_334:0000215', 'num__sprout count at three-month|CO_334:0000214', 'num__sprouting proportion|CO_334:0000008', 'num__storage root cortex color visual rating 1-4|CO_334:0000115', 'num__storage root periderm color visual rating 1-4|CO_334:0000064', 'num__storage root pulp color visual rating 1-3|CO_334:0000021', 'num__storage root shape visual rating 1-6|CO_334:0000020', 'num__storage root size visual rating 1-7|CO_334:0000019', 'num__taste of boiled root rating 1-3|CO_334:0000085', 'num__top yield|CO_334:0000017', 'num__total carotenoid by chart 1-8|CO_334:0000161', 'cat__programName_IITA', 'cat__programDescription_IITA cassava breeding program, Ibadan, Nigeria', 'cat__studyName_16uyt10whtrtIB', 'cat__studyDescription_Assessment of Varieties of Cassava for high yield, disease resistance in a  Uniform Yield Trial (10 clones) in Ibadan 2016/2017 Breeding Season', 'cat__studyDesign_RCBD', 'cat__plantingDate_2016-June-21', 'cat__harvestDate_2017-May-26', 'cat__locationName_Ibadan', 'cat__germplasmName_IITA-TMS-IBA131129', 'cat__germplasmName_IITA-TMS-IBA131187', 'cat__germplasmName_IITA-TMS-IBA131324', 'cat__germplasmName_IITA-TMS-IBA131390', 'cat__germplasmName_IITA-TMS-IBA131511', 'cat__germplasmName_IITA-TMS-IBA131514', 'cat__germplasmName_IITA-TMS-IBA131710', 'cat__germplasmName_IITA-TMS-IBA131712', 'cat__germplasmName_IITA-TMS-IBA980581', 'cat__germplasmName_TMEB419', 'cat__observationLevel_plot', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131187_110', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131324_101', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131390_102', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131514_107', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131710_105', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131712_108', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131129_207', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131187_209', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131390_208', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131511_210', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA980581_201', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-TMEB419_206', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131129_303', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131187_301', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131324_308', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131514_302', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131710_306', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-TMEB419_310', 'cat__entryType_test', 'cat__notes_ (Operator: PVNSPRASAD, Time: )', 'cat__notes_missing']\n",
            "Count of features: 101\n",
            "                                                                  Feature  \\\n",
            "34                 num__fresh storage root weight per plot|CO_334:0000012   \n",
            "30                                          num__dry yield|CO_334:0000014   \n",
            "35                             num__harvest index variable|CO_334:0000015   \n",
            "43                               num__root number counting|CO_334:0000011   \n",
            "14  num__cassava anthractnose disease incidence in 9-month|CO_334:0000182   \n",
            "..                                                                    ...   \n",
            "66                                         cat__plantingDate_2016-June-21   \n",
            "67                                           cat__harvestDate_2017-May-26   \n",
            "68                                               cat__locationName_Ibadan   \n",
            "5                                                          num__fieldSize   \n",
            "0                                                          num__studyYear   \n",
            "\n",
            "    Importance  \n",
            "34    0.310280  \n",
            "30    0.189499  \n",
            "35    0.168926  \n",
            "43    0.098870  \n",
            "14    0.070607  \n",
            "..         ...  \n",
            "66    0.000000  \n",
            "67    0.000000  \n",
            "68    0.000000  \n",
            "5     0.000000  \n",
            "0     0.000000  \n",
            "\n",
            "[101 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "data preprocessing (cleaned data) on feature importance metrics"
      ],
      "metadata": {
        "id": "CjmmYWECh51c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.impute import SimpleImputer  # Ensure this is imported\n",
        "import joblib\n",
        "\n",
        "# Load the cleaned CSV file\n",
        "cleaned_file_path = '/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/cleaned/cleaned_2020-04-07t051218phenotype_download.csv'\n",
        "data = pd.read_csv(cleaned_file_path)\n",
        "\n",
        "\n",
        "# Define the target variable\n",
        "target = 'fresh root yield|CO_334:0000013'\n",
        "\n",
        "# Separate features and target\n",
        "X = data.drop(columns=[target])\n",
        "y = data[target]\n",
        "\n",
        "# Identify categorical and numeric columns\n",
        "categorical_cols = X.select_dtypes(include=['object']).columns\n",
        "numeric_cols = X.select_dtypes(include=['number']).columns\n",
        "\n",
        "# Create preprocessing pipelines for numeric and categorical data\n",
        "numeric_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='mean'))\n",
        "])\n",
        "\n",
        "categorical_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "# Combine preprocessing steps\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', numeric_transformer, numeric_cols),\n",
        "        ('cat', categorical_transformer, categorical_cols)\n",
        "    ])\n",
        "\n",
        "# Create a pipeline that first preprocesses the data then applies the model\n",
        "model_pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))\n",
        "])\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)\n",
        "\n",
        "# Train the model\n",
        "model_pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = model_pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "print(f\"R-squared: {r2}\")\n",
        "\n",
        "# Save the trained model to disk\n",
        "joblib_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\"\n",
        "joblib.dump(model_pipeline, joblib_file)\n",
        "print(f\"Model saved to {joblib_file}\")\n",
        "\n",
        "# --- Extracting Feature Importances ---\n",
        "# Retrieve the preprocessor from the pipeline\n",
        "preprocessor = model_pipeline.named_steps['preprocessor']\n",
        "\n",
        "# For numeric features, the names remain unchanged\n",
        "num_features = list(numeric_cols)\n",
        "\n",
        "# For categorical features, get the feature names from the one-hot encoder\n",
        "# Note: get_feature_names_out is available in recent versions of scikit-learn\n",
        "cat_encoder = preprocessor.named_transformers_['cat'].named_steps['onehot']\n",
        "cat_features = cat_encoder.get_feature_names_out(categorical_cols).tolist()\n",
        "\n",
        "# Combine all feature names in the order they appear after transformation\n",
        "feature_names = num_features + cat_features\n",
        "\n",
        "# Get feature importances from the RandomForestRegressor\n",
        "importances = model_pipeline.named_steps['regressor'].feature_importances_\n",
        "\n",
        "# Get the complete list of feature names after preprocessing\n",
        "feature_names = model_pipeline.named_steps['preprocessor'].get_feature_names_out()\n",
        "print(\"Number of features:\", len(feature_names))\n",
        "print(\"Importances length:\", len(model_pipeline.named_steps['regressor'].feature_importances_))\n",
        "\n",
        "# Create a DataFrame with the feature importances\n",
        "feature_importance_df = pd.DataFrame({\n",
        "    'Feature': feature_names,\n",
        "    'Importance': model_pipeline.named_steps['regressor'].feature_importances_\n",
        "}).sort_values(by='Importance', ascending=False)\n",
        "\n",
        "# Show full column names in output\n",
        "pd.set_option('display.max_colwidth', None)\n",
        "print(\"feature_names.tolist: \", feature_names.tolist())\n",
        "\n",
        "count_features = len(feature_names.tolist())\n",
        "print(\"Count of features:\", count_features)\n",
        "\n",
        "\n",
        "print(feature_importance_df)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qq8zcNDSiDcA",
        "outputId": "c1098a5a-e028-4871-dfc8-9d4bbe475676"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error: 6.631723082499985\n",
            "R-squared: 0.7349345291747185\n",
            "Model saved to /content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\n",
            "Number of features: 101\n",
            "Importances length: 101\n",
            "feature_names.tolist:  ['num__studyYear', 'num__programDbId', 'num__studyDbId', 'num__plotWidth', 'num__plotLength', 'num__fieldSize', 'num__locationDbId', 'num__germplasmDbId', 'num__observationUnitDbId', 'num__replicate', 'num__blockNumber', 'num__plotNumber', 'num__boiled storage root color visual 1-3|CO_334:0000114', 'num__cassava anthractnose disease incidence in 6-month|CO_334:0000181', 'num__cassava anthractnose disease incidence in 9-month|CO_334:0000182', 'num__cassava anthractnose disease severity in 6-month|CO_334:0000184', 'num__cassava anthractnose disease severity in 9-month|CO_334:0000185', 'num__cassava bacterial blight incidence 3-month evaluation|CO_334:0000178', 'num__cassava bacterial blight incidence 6-month evaluation|CO_334:0000179', 'num__cassava bacterial blight severity 3-month evaluation|CO_334:0000175', 'num__cassava bacterial blight severity 6-month evaluation|CO_334:0000176', 'num__cassava green mite severity first evaluation|CO_334:0000189', 'num__cassava green mite severity second evaluation|CO_334:0000190', 'num__cassava mosaic disease incidence 1-month evaluation|CO_334:0000195', 'num__cassava mosaic disease incidence 3-month evaluation|CO_334:0000196', 'num__cassava mosaic disease severity 1-month evaluation|CO_334:0000191', 'num__cassava mosaic disease severity 3-month evaluation|CO_334:0000192', 'num__cassava mosaic disease severity 6-month evaluation|CO_334:0000194', 'num__dry matter content by specific gravity method|CO_334:0000160', 'num__dry matter content percentage|CO_334:0000092', 'num__dry yield|CO_334:0000014', 'num__ease of peeling root cortex visual rating 1-3|CO_334:0000308', 'num__first apical branch height measurement in cm|CO_334:0000106', 'num__fresh shoot weight measurement in kg per plot|CO_334:0000016', 'num__fresh storage root weight per plot|CO_334:0000012', 'num__harvest index variable|CO_334:0000015', 'num__initial vigor assessment 1-7|CO_334:0000009', 'num__number of planted stakes per plot counting|CO_334:0000159', 'num__plant architecture visual rating 1-5|CO_334:0000099', 'num__plant stands harvested counting|CO_334:0000010', 'num__poundability assessment 0-4|CO_334:0000074', 'num__proportion lodged plants in percentage|CO_334:0000094', 'num__root neck length visual rating 0-7|CO_334:0000022', 'num__root number counting|CO_334:0000011', 'num__root weight in air|CO_334:0000157', 'num__root weight in water|CO_334:0000158', 'num__rotted storage root counting|CO_334:0000084', 'num__specific gravity|CO_334:0000163', 'num__sprout count at nine-month|CO_334:0000216', 'num__sprout count at one-month|CO_334:0000213', 'num__sprout count at six-month|CO_334:0000215', 'num__sprout count at three-month|CO_334:0000214', 'num__sprouting proportion|CO_334:0000008', 'num__storage root cortex color visual rating 1-4|CO_334:0000115', 'num__storage root periderm color visual rating 1-4|CO_334:0000064', 'num__storage root pulp color visual rating 1-3|CO_334:0000021', 'num__storage root shape visual rating 1-6|CO_334:0000020', 'num__storage root size visual rating 1-7|CO_334:0000019', 'num__taste of boiled root rating 1-3|CO_334:0000085', 'num__top yield|CO_334:0000017', 'num__total carotenoid by chart 1-8|CO_334:0000161', 'cat__programName_IITA', 'cat__programDescription_IITA cassava breeding program, Ibadan, Nigeria', 'cat__studyName_16uyt10whtrtIB', 'cat__studyDescription_Assessment of Varieties of Cassava for high yield, disease resistance in a  Uniform Yield Trial (10 clones) in Ibadan 2016/2017 Breeding Season', 'cat__studyDesign_RCBD', 'cat__plantingDate_2016-June-21', 'cat__harvestDate_2017-May-26', 'cat__locationName_Ibadan', 'cat__germplasmName_IITA-TMS-IBA131129', 'cat__germplasmName_IITA-TMS-IBA131187', 'cat__germplasmName_IITA-TMS-IBA131324', 'cat__germplasmName_IITA-TMS-IBA131390', 'cat__germplasmName_IITA-TMS-IBA131511', 'cat__germplasmName_IITA-TMS-IBA131514', 'cat__germplasmName_IITA-TMS-IBA131710', 'cat__germplasmName_IITA-TMS-IBA131712', 'cat__germplasmName_IITA-TMS-IBA980581', 'cat__germplasmName_TMEB419', 'cat__observationLevel_plot', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131187_110', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131324_101', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131390_102', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131514_107', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131710_105', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep1-IITA-TMS-IBA131712_108', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131129_207', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131187_209', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131390_208', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA131511_210', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-IITA-TMS-IBA980581_201', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep2-TMEB419_206', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131129_303', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131187_301', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131324_308', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131514_302', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-IITA-TMS-IBA131710_306', 'cat__observationUnitName_2017-16uyt10whtrtIB-rep3-TMEB419_310', 'cat__entryType_test', 'cat__notes_ (Operator: PVNSPRASAD, Time: )', 'cat__notes_missing']\n",
            "Count of features: 101\n",
            "                                                                  Feature  \\\n",
            "34                 num__fresh storage root weight per plot|CO_334:0000012   \n",
            "30                                          num__dry yield|CO_334:0000014   \n",
            "35                             num__harvest index variable|CO_334:0000015   \n",
            "43                               num__root number counting|CO_334:0000011   \n",
            "14  num__cassava anthractnose disease incidence in 9-month|CO_334:0000182   \n",
            "..                                                                    ...   \n",
            "66                                         cat__plantingDate_2016-June-21   \n",
            "67                                           cat__harvestDate_2017-May-26   \n",
            "68                                               cat__locationName_Ibadan   \n",
            "5                                                          num__fieldSize   \n",
            "0                                                          num__studyYear   \n",
            "\n",
            "    Importance  \n",
            "34    0.310280  \n",
            "30    0.189499  \n",
            "35    0.168926  \n",
            "43    0.098870  \n",
            "14    0.070607  \n",
            "..         ...  \n",
            "66    0.000000  \n",
            "67    0.000000  \n",
            "68    0.000000  \n",
            "5     0.000000  \n",
            "0     0.000000  \n",
            "\n",
            "[101 rows x 2 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "data preprocessing (uncleaned data) on model performance"
      ],
      "metadata": {
        "id": "1M2C-lotiFfQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import joblib\n",
        "\n",
        "# Load the trained model pipeline\n",
        "model_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/uncleaned/random_forest_model.pkl\"\n",
        "model_pipeline = joblib.load(model_file)\n",
        "\n",
        "# Inspect the pipeline steps to find the correct name for the final step\n",
        "print(model_pipeline.named_steps)\n",
        "\n",
        "# Extract feature names from the preprocessor\n",
        "numeric_features = model_pipeline.named_steps['preprocessor'].transformers_[0][2]\n",
        "categorical_features = model_pipeline.named_steps['preprocessor'].transformers_[1][2]\n",
        "\n",
        "# Ensure they are lists\n",
        "numeric_features = list(numeric_features) if not isinstance(numeric_features, list) else numeric_features\n",
        "categorical_features = list(categorical_features) if not isinstance(categorical_features, list) else categorical_features\n",
        "\n",
        "# Prepare new data (ensure it has the same columns as the training data)\n",
        "# Replace this with your actual new data\n",
        "new_data = pd.DataFrame({\n",
        "    'cassava anthractnose disease severity in 9-month|CO_334:0000185': [3],\n",
        "})\n",
        "\n",
        "# Ensure all required columns are present in the new data\n",
        "all_features = numeric_features + categorical_features\n",
        "\n",
        "for col in all_features:\n",
        "    if col not in new_data.columns:\n",
        "        new_data[col] = 0  # Fill with default value, adjust as necessary\n",
        "\n",
        "# Select only the columns used in training\n",
        "new_data = new_data[all_features]\n",
        "\n",
        "# Preprocess the new data using the same pipeline\n",
        "new_data_preprocessed = model_pipeline.named_steps['preprocessor'].transform(new_data)\n",
        "\n",
        "# Make predictions on the new data\n",
        "new_predictions = model_pipeline.named_steps['regressor'].predict(new_data_preprocessed)\n",
        "\n",
        "print(\"Predictions on new data:\", new_predictions)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SbA4rayQiNcR",
        "outputId": "1b932f25-0841-42a1-8840-937f7801a6d9"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'preprocessor': ColumnTransformer(transformers=[('num',\n",
            "                                 Pipeline(steps=[('imputer', SimpleImputer())]),\n",
            "                                 Index(['studyYear', 'programDbId', 'studyDbId', 'plotWidth', 'plotLength',\n",
            "       'fieldSize', 'fieldTrialIsPlannedToBeGenotyped',\n",
            "       'fieldTrialIsPlannedToCross', 'locationDbId', 'germplasmDbId',\n",
            "       'germplasmSynonyms', 'observationUnitDbId', 'replicate', 'blockNumber',\n",
            "       'plotNumber', 'rowNum...\n",
            "                                 Pipeline(steps=[('imputer',\n",
            "                                                  SimpleImputer(fill_value='missing',\n",
            "                                                                strategy='constant')),\n",
            "                                                 ('onehot',\n",
            "                                                  OneHotEncoder(handle_unknown='ignore'))]),\n",
            "                                 Index(['programName', 'programDescription', 'studyName', 'studyDescription',\n",
            "       'studyDesign', 'plantingDate', 'harvestDate', 'locationName',\n",
            "       'germplasmName', 'observationLevel', 'observationUnitName', 'entryType',\n",
            "       'notes'],\n",
            "      dtype='object'))]), 'regressor': RandomForestRegressor(random_state=42)}\n",
            "Predictions on new data: [7.843]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "data preprocessing (cleaned data) on model performance"
      ],
      "metadata": {
        "id": "hotNnVt7iPLr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import joblib\n",
        "\n",
        "# Load the trained model pipeline\n",
        "model_file = \"/content/drive/MyDrive/01_December/DDIS/Data/Uniform_Yield_Trial/model/random_forest_model.pkl\"\n",
        "model_pipeline = joblib.load(model_file)\n",
        "\n",
        "# Inspect the pipeline steps to find the correct name for the final step\n",
        "print(model_pipeline.named_steps)\n",
        "\n",
        "# Extract feature names from the preprocessor\n",
        "numeric_features = model_pipeline.named_steps['preprocessor'].transformers_[0][2]\n",
        "categorical_features = model_pipeline.named_steps['preprocessor'].transformers_[1][2]\n",
        "\n",
        "# Ensure they are lists\n",
        "numeric_features = list(numeric_features) if not isinstance(numeric_features, list) else numeric_features\n",
        "categorical_features = list(categorical_features) if not isinstance(categorical_features, list) else categorical_features\n",
        "\n",
        "# Prepare new data (ensure it has the same columns as the training data)\n",
        "# Replace this with your actual new data\n",
        "new_data = pd.DataFrame({\n",
        "    'cassava anthractnose disease severity in 9-month|CO_334:0000185': [3],\n",
        "})\n",
        "\n",
        "# Ensure all required columns are present in the new data\n",
        "all_features = numeric_features + categorical_features\n",
        "\n",
        "for col in all_features:\n",
        "    if col not in new_data.columns:\n",
        "        new_data[col] = 0  # Fill with default value, adjust as necessary\n",
        "\n",
        "# Select only the columns used in training\n",
        "new_data = new_data[all_features]\n",
        "\n",
        "# Preprocess the new data using the same pipeline\n",
        "new_data_preprocessed = model_pipeline.named_steps['preprocessor'].transform(new_data)\n",
        "\n",
        "# Make predictions on the new data\n",
        "new_predictions = model_pipeline.named_steps['regressor'].predict(new_data_preprocessed)\n",
        "\n",
        "print(\"Predictions on new data:\", new_predictions)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sdpjo9TtiW9y",
        "outputId": "69c372bf-0c2c-46b0-8d24-db3e4b1af920"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'preprocessor': ColumnTransformer(transformers=[('num',\n",
            "                                 Pipeline(steps=[('imputer', SimpleImputer())]),\n",
            "                                 Index(['studyYear', 'programDbId', 'studyDbId', 'plotWidth', 'plotLength',\n",
            "       'fieldSize', 'fieldTrialIsPlannedToBeGenotyped',\n",
            "       'fieldTrialIsPlannedToCross', 'locationDbId', 'germplasmDbId',\n",
            "       'germplasmSynonyms', 'observationUnitDbId', 'replicate', 'blockNumber',\n",
            "       'plotNumber', 'rowNum...\n",
            "                                 Pipeline(steps=[('imputer',\n",
            "                                                  SimpleImputer(fill_value='missing',\n",
            "                                                                strategy='constant')),\n",
            "                                                 ('onehot',\n",
            "                                                  OneHotEncoder(handle_unknown='ignore'))]),\n",
            "                                 Index(['programName', 'programDescription', 'studyName', 'studyDescription',\n",
            "       'studyDesign', 'plantingDate', 'harvestDate', 'locationName',\n",
            "       'germplasmName', 'observationLevel', 'observationUnitName', 'entryType',\n",
            "       'notes'],\n",
            "      dtype='object'))]), 'regressor': RandomForestRegressor(random_state=42)}\n",
            "Predictions on new data: [7.843]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/impute/_base.py:635: UserWarning: Skipping features without any observed values: ['fieldTrialIsPlannedToBeGenotyped' 'fieldTrialIsPlannedToCross'\n",
            " 'germplasmSynonyms' 'rowNumber' 'colNumber' 'plantNumber'\n",
            " 'plantedSeedlotStockDbId' 'plantedSeedlotStockUniquename'\n",
            " 'plantedSeedlotCurrentCount' 'plantedSeedlotCurrentWeightGram'\n",
            " 'plantedSeedlotBoxName' 'plantedSeedlotTransactionCount'\n",
            " 'plantedSeedlotTransactionWeight' 'plantedSeedlotTransactionDescription'\n",
            " 'availableGermplasmSeedlotUniquenames'\n",
            " 'cassava mosaic disease incidence 6-month evaluation|CO_334:0000198']. At least one non-missing value is needed for imputation with strategy='mean'.\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "1r4VptV3j-By"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "s41HU8kaj9Ev"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOlRtQRBmAMeyEhQoDNf+vj",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}